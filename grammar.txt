<STATEMENT> ::= 'Int'/'Float' <identifier> '=' <EXPRESSION> ';'
              | 'Int'/'Float' <identifier> ';'
              | <EXPRESSION> ';'
              | 'If' '(' <EXPRESSION> ')' '{' <STATEMENT>* '}' <ELIF_CLAUSES> <ELSE_BLOCK>
              | 'For' <identifier> 'in' <ITERATOR> '{' <STATEMENT>* '}'
              | 'While' '(' <COMP_EXPRESSION> ')' '{' <STATEMENT>* '}'
              | 'Continue'
              | 'Break'

<ELIF_CLAUSES> ::= <ELIF_CLAUSE>*
<ELIF_CLAUSE> ::= 'Elif' '(' <EXPRESSION> ')' '{' <STATEMENT>* '}'

<ELSE_BLOCK> ::= 'Else' '{' <STATEMENT>* '}'

<ITERATOR> ::= <RANGE_ITERATOR>

<RANGE_ITERATOR> ::= <ARITH_EXPRESSION> ('..' | ':') <ARITH_EXPRESSION> (('..' | ':') <ARITH_EXPRESSION>)?

<EXPRESSION> ::= <assignment> (',' <assignment>)*
              | <TERNARY_EXPR>

<TERNARY_EXPR> ::= <COMP_EXPRESSION> '?' <EXPRESSION> ':' <EXPRESSION>

<assignment> ::= <identifier> '=' <COMP_EXPRESSION>
               | <identifier>

<COMP_EXPRESSION> ::= '!' <COMP_EXPRESSION>
                    | <ARITH_EXPRESSION> ( ('==' | '!=' | '<' | '>' | '<=' | '>=') <ARITH_EXPRESSION> )*

<ARITH_EXPRESSION> ::= <TERM> ( ('+' | '-') <TERM> )*

<TERM> ::= <FACTOR> ( ('*' | '/') <FACTOR> )*

<FACTOR> ::= ( ('+' | '-')* <EXPRESSION> )
           | <POWER>

<POWER> ::= <ATOM> ('^' <FACTOR>)*

<ATOM> ::= <identifier>
         | <INT>
         | <FLOAT>
         | '(' <EXPRESSION> ')'
         | Cast<Type>(<EXPRESSION>)
